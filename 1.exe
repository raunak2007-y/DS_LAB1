#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int val) {
        data = val;
        next = nullptr;
    }
};

class SinglyLinkedList {
    Node* head;

public:
    SinglyLinkedList() {
        head = nullptr;
    }

    // (a) Insertion at the beginning
    void insertAtBeginning(int val) {
        Node* newNode = new Node(val);
        newNode->next = head;
        head = newNode;
        cout << val << " inserted at the beginning.\n";
    }

    // (b) Insertion at the end
    void insertAtEnd(int val) {
        Node* newNode = new Node(val);
        if (head == nullptr) {
            head = newNode;
            cout << val << " inserted as first node.\n";
            return;
        }
        Node* temp = head;
        while (temp->next != nullptr)
            temp = temp->next;
        temp->next = newNode;
        cout << val << " inserted at the end.\n";
    }

    // (c) Insertion before or after a specific node
    void insertBeforeAfter(int target, int val, string position) {
        if (head == nullptr) {
            cout << "List is empty.\n";
            return;
        }

        Node* newNode = new Node(val);

        // Insert before head
        if (head->data == target && position == "before") {
            newNode->next = head;
            head = newNode;
            cout << val << " inserted before " << target << ".\n";
            return;
        }

        Node* temp = head;
        Node* prev = nullptr;

        while (temp != nullptr && temp->data != target) {
            prev = temp;
            temp = temp->next;
        }

        if (temp == nullptr) {
            cout << "Node " << target << " not found.\n";
            delete newNode;
            return;
        }

        if (position == "after") {
            newNode->next = temp->next;
            temp->next = newNode;
            cout << val << " inserted after " << target << ".\n";
        } 
        else if (position == "before") {
            newNode->next = temp;
            prev->next = newNode;
            cout << val << " inserted before " << target << ".\n";
        } 
        else {
            cout << "Invalid position! Use 'before' or 'after'.\n";
            delete newNode;
        }
    }

    // (d) Deletion from the beginning
    void deleteFromBeginning() {
        if (head == nullptr) {
            cout << "List is empty.\n";
            return;
        }
        Node* temp = head;
        head = head->next;
        cout << "Deleted " << temp->data << " from beginning.\n";
        delete temp;
    }

    // (e) Deletion from the end
    void deleteFromEnd() {
        if (head == nullptr) {
            cout << "List is empty.\n";
            return;
        }
        if (head->next == nullptr) {
            cout << "Deleted " << head->data << " from end.\n";
            delete head;
            head = nullptr;
            return;
        }
        Node* temp = head;
        while (temp->next->next != nullptr)
            temp = temp->next;

        cout << "Deleted " << temp->next->data << " from end.\n";
        delete temp->next;
        temp->next = nullptr;
    }

    // (f) Deletion of a specific node
    void deleteSpecific(int key) {
        if (head == nullptr) {
            cout << "List is empty.\n";
            return;
        }
        if (head->data == key) {
            Node* temp = head;
            head = head->next;
            cout << "Deleted node " << key << ".\n";
            delete temp;
            return;
        }

        Node* temp = head;
        while (temp->next != nullptr && temp->next->data != key)
            temp = temp->next;

        if (temp->next == nullptr) {
            cout << "Node " << key << " not found.\n";
        } else {
            Node* delNode = temp->next;
            temp->next = delNode->next;
            cout << "Deleted node " << key << ".\n";
            delete delNode;
        }
    }

    // (g) Search for a node and display its position
    void search(int key) {
        Node* temp = head;
        int pos = 1;
        while (temp != nullptr) {
            if (temp->data == key) {
                cout << "Node " << key << " found at position " << pos << ".\n";
                return;
            }
            temp = temp->next;
            pos++;
        }
        cout << "Node " << key << " not found in list.\n";
    }

    // (h) Display all the node values
    void display() {
        if (head == nullptr) {
            cout << "List is empty.\n";
            return;
        }
        Node* temp = head;
        cout << "Linked List elements: ";
        while (temp != nullptr) {
            cout << temp->data << " -> ";
            temp = temp->next;
        }
        cout << "NULL\n";
    }
};

// -------------------- MENU-DRIVEN PART --------------------

int main() {
    SinglyLinkedList sll;
    int choice, val, target;
    string pos;

    while (true) {
        cout << "\n---- Singly Linked List Operations ----\n";
        cout << "1. Insert at Beginning\n";
        cout << "2. Insert at End\n";
        cout << "3. Insert Before/After a Node\n";
        cout << "4. Delete from Beginning\n";
        cout << "5. Delete from End\n";
        cout << "6. Delete a Specific Node\n";
        cout << "7. Search a Node\n";
        cout << "8. Display All Nodes\n";
        cout << "9. Exit\n";
        cout << "Enter your choice (1-9): ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "Enter value to insert: ";
            cin >> val;
            sll.insertAtBeginning(val);
            break;
        case 2:
            cout << "Enter value to insert: ";
            cin >> val;
            sll.insertAtEnd(val);
            break;
        case 3:
            cout << "Enter target node value: ";
            cin >> target;
            cout << "Enter new value to insert: ";
            cin >> val;
            cout << "Insert 'before' or 'after' the target node: ";
            cin >> pos;
            sll.insertBeforeAfter(target, val, pos);
            break;
        case 4:
            sll.deleteFromBeginning();
            break;
        case 5:
            sll.deleteFromEnd();
            break;
        case 6:
            cout << "Enter node value to delete: ";
            cin >> val;
            sll.deleteSpecific(val);
            break;
        case 7:
            cout << "Enter value to search: ";
            cin >> val;
            sll.search(val);
            break;
        case 8:
            sll.display();
            break;
        case 9:
            cout << "Exiting program...\n";
            return 0;
        default:
            cout << "Invalid choice! Please try again.\n";
        }
    }
}
